package com.hacktics.diviner.database;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import org.parosproxy.paros.db.AbstractTable;

import com.hacktics.diviner.analyze.SCENARIO_MODE;

/**
 * 
 * @author Eran Tamari
 *
 */

public class DivinerTableResults extends AbstractTable {

	private static final String RESULTID	= "RESULTID";
	private static final String PARAMID	= "PARAMID";
	private static final String IN_PAGE	= "INPAGE";
	private static final String OUT_PAGE = "OUTPAGE";
	private static final String TYPE = "RESULTTYPE";
	private static final String OUTPUT_PLUGIN = "OUTPUTPLUGIN";
	private static final String SCENARIO = "SCENARIO";
	private static final String HIST_MODE = "HISTMODE";
	private static final String IN_PAGE_ID	= "INPAGEID";
	private static final String OUT_PAGE_ID = "OUTPAGEID";
	private static final String DIFF_PERCENT = "DIFFPERCENT";
	private static final String TOKEN_TYPE = "TOKENTYPE";
	private static final String TOKEN_VALUE = "VALUE";
	private static final String IS_TOKEN_APPEND_MODE = "ISTOKENAPPENDMODE";
	
	private PreparedStatement psGetCleanHistory = null;	//Clean history = without pages that affected the target page
	private PreparedStatement psInsert1 = null;
	private CallableStatement psInsert2 = null;
	private PreparedStatement psGetAll = null;
	private PreparedStatement psGetPages = null;
	private PreparedStatement psOtherParams = null;
	private PreparedStatement psGetResults = null;
	private PreparedStatement psCheckDuplicate = null;
	private PreparedStatement psGetResultByParam = null;
	private PreparedStatement psGetResultByParamUniqueSource = null;
	private PreparedStatement psGetResultByParamUniqueLeads = null;
	private PreparedStatement psUpdate = null;
	private PreparedStatement psRowCount = null;
	private PreparedStatement psGetScenariosInputPage = null;
	private PreparedStatement psGetScenariosOutputPage = null;
	private PreparedStatement psGetAllDisctinct = null;
	
	@Override
	protected void reconnect(Connection conn) throws SQLException {
		ResultSet rs = conn.getMetaData().getTables(null, null, "RESULTS", null);
		if ( ! rs.next()) {
			// Need to create the table
			// Alex: add varchar size limits (ZAP 1.4.1) - r29
			PreparedStatement stmt = conn.prepareStatement(
					"CREATE cached TABLE RESULTS(resultid bigint generated by default as identity (start with 1), paramid bigint not null, " +
					"inpage varchar(32768) not null, outpage varchar(32768) not null, resulttype integer not null, scenario integer not null, histmode integer not null, inpageid bigint not null, outpageid bigint not null, outputplugin int not null, diffpercent int, tokentype int, istokenappendmode boolean, value varchar(30) not null)");
			stmt.execute();
		}
		rs.close();

		psGetCleanHistory = conn.prepareStatement("SELECT * FROM RESULTS WHERE " + IN_PAGE + " = ? AND " + OUT_PAGE + "= ?");

		psInsert1 = conn.prepareStatement("INSERT INTO RESULTS (" + PARAMID + "," + IN_PAGE + "," +  OUT_PAGE +  "," + TYPE + "," + SCENARIO + "," +  HIST_MODE + "," + IN_PAGE_ID + "," + OUT_PAGE_ID + "," + OUTPUT_PLUGIN + "," + DIFF_PERCENT + "," + TOKEN_TYPE + "," + IS_TOKEN_APPEND_MODE + "," + TOKEN_VALUE + ") VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
		psInsert2 = conn.prepareCall("CALL IDENTITY();");

		psGetAll = conn.prepareStatement("SELECT * FROM RESULTS LEFT JOIN DIVINERPARAM ON DIVINERPARAM.PARAMID = RESULTS.PARAMID");
		psGetAllDisctinct = conn.prepareStatement("SELECT Distinct " + PARAMID + "," + IN_PAGE + "," + OUT_PAGE + "," + TYPE  + "," + SCENARIO + "," + HIST_MODE + "," + IN_PAGE_ID + "," + OUT_PAGE_ID + "," + OUTPUT_PLUGIN +"," + TOKEN_TYPE + "," + IS_TOKEN_APPEND_MODE + "," + DivinerTableParam.VALUE + "," +DivinerTableParam.NAME +" FROM RESULTS LEFT JOIN DIVINERPARAM ON DIVINERPARAM.PARAMID = RESULTS.PARAMID");

		psGetPages = conn.prepareStatement("SELECT INPAGE FROM RESULTS UNION DISTINCT SELECT OUTPAGE FROM RESULTS");
		psOtherParams = conn.prepareStatement("SELECT DISTINCT NAME FROM DIVINERPARAM,RESULTS WHERE DIVINERPARAM.PAGE = RESULTS.INPAGE AND PAGE = ? AND DIVINERPARAM.NAME NOT IN (SELECT NAME FROM DIVINERPARAM,RESULTS WHERE DIVINERPARAM.PARAMID = RESULTS.PARAMID AND PAGE = ?)");
		psGetResults = conn.prepareStatement("SELECT * FROM RESULTS LEFT JOIN DIVINERPARAM ON DIVINERPARAM.PARAMID = RESULTS.PARAMID  WHERE " +  IN_PAGE + "= ? ORDER BY " + PARAMID);
		psCheckDuplicate = conn.prepareStatement("SELECT * FROM RESULTS WHERE " + IN_PAGE + "= ? AND " + PARAMID + "= ? AND " + OUT_PAGE + "=? AND " + TYPE + "=?" );
		psGetResultByParam = conn.prepareStatement("SELECT * FROM RESULTS LEFT JOIN DIVINERPARAM ON DIVINERPARAM.PARAMID = RESULTS.PARAMID  WHERE " +  IN_PAGE + "= ? AND RESULTS." + PARAMID + "= ? ORDER BY " + DIFF_PERCENT);
		psGetResultByParamUniqueSource = conn.prepareStatement("SELECT DISTINCT " + PARAMID + "," + IN_PAGE_ID + "," + IN_PAGE + "," + DivinerTableParam.NAME + "," + DivinerTableParam.VALUE + " FROM RESULTS LEFT JOIN DIVINERPARAM ON DIVINERPARAM.PARAMID = RESULTS.PARAMID  WHERE " +  IN_PAGE + "= ? AND RESULTS." + PARAMID + "= ?");
		psGetResultByParamUniqueLeads = conn.prepareStatement("SELECT DISTINCT " + PARAMID + "," + IN_PAGE_ID + "," + IN_PAGE + "," + OUT_PAGE + "," + OUT_PAGE_ID + "," + TYPE + "," + OUTPUT_PLUGIN + "," + DivinerTableParam.NAME + " FROM RESULTS LEFT JOIN DIVINERPARAM ON DIVINERPARAM.PARAMID = RESULTS.PARAMID ORDER BY " + IN_PAGE_ID + "," + OUT_PAGE_ID);
		psUpdate = conn.prepareStatement("UPDATE RESULTS SET "+ TYPE + "= ? WHERE " + RESULTID + "= ? AND " + OUTPUT_PLUGIN + "= ?");
		psRowCount = conn.prepareStatement("SELECT COUNT(*) \"a\" FROM RESULTS");
		psGetScenariosInputPage = conn.prepareStatement("SELECT SCENARIO FROM RESULTS WHERE " + IN_PAGE + "= ?" );
		psGetScenariosOutputPage = conn.prepareStatement("SELECT SCENARIO FROM RESULTS WHERE " + OUT_PAGE + "= ?");

	}



	public ArrayList<DivinerRecordResult> getAll () throws SQLException {
		ArrayList<DivinerRecordResult> result = new ArrayList<DivinerRecordResult>();
		ResultSet rs = psGetAll.executeQuery();
		while (rs.next()) {
			result.add(new DivinerRecordResult(rs.getLong(RESULTID), rs.getLong(PARAMID), rs.getString(IN_PAGE), rs.getString(OUT_PAGE),  
					rs.getInt(TYPE), rs.getString(DivinerTableParam.NAME), rs.getString(DivinerTableParam.VALUE), rs.getInt(SCENARIO),  rs.getInt(HIST_MODE), rs.getInt(IN_PAGE_ID), rs.getInt(OUT_PAGE_ID), rs.getInt(OUTPUT_PLUGIN), rs.getInt(DIFF_PERCENT), rs.getInt(TOKEN_TYPE), rs.getBoolean(IS_TOKEN_APPEND_MODE), rs.getString(TOKEN_VALUE)));
		}
		rs.close();

		return result;
	}

	public ArrayList<DivinerRecordResult> getAllDistinctResults () throws SQLException {
		ArrayList<DivinerRecordResult> result = new ArrayList<DivinerRecordResult>();
		ResultSet rs = psGetAllDisctinct.executeQuery();
		while (rs.next()) {
			result.add(new DivinerRecordResult(-1, rs.getLong(PARAMID), rs.getString(IN_PAGE), rs.getString(OUT_PAGE),  
					rs.getInt(TYPE), rs.getString(DivinerTableParam.NAME), rs.getString(DivinerTableParam.VALUE), rs.getInt(SCENARIO),  rs.getInt(HIST_MODE), rs.getInt(IN_PAGE_ID), rs.getInt(OUT_PAGE_ID), rs.getInt(OUTPUT_PLUGIN), -1, rs.getInt(TOKEN_TYPE), rs.getBoolean(IS_TOKEN_APPEND_MODE), ""/*Token value cannot be included in this query because it's distinct*/));
		}
		rs.close();

		return result;
	}
	
	public ArrayList<DivinerRecordResult> getResultsPerPage(String page) throws SQLException
	{
		ArrayList<DivinerRecordResult> results = new ArrayList<DivinerRecordResult>();
		psGetResults.setString(1, page);
		ResultSet rs = psGetResults.executeQuery();
		while (rs.next()){
			results.add(new DivinerRecordResult(rs.getLong(RESULTID), rs.getLong(PARAMID), rs.getString(IN_PAGE), rs.getString(OUT_PAGE), rs.getInt(TYPE), rs.getString(DivinerTableParam.NAME), rs.getString(DivinerTableParam.VALUE), rs.getInt(SCENARIO), rs.getInt(HIST_MODE), rs.getInt(IN_PAGE_ID), rs.getInt(OUT_PAGE_ID), rs.getInt(OUTPUT_PLUGIN), rs.getInt(DIFF_PERCENT), rs.getInt(TOKEN_TYPE), rs.getBoolean(IS_TOKEN_APPEND_MODE), rs.getString(TOKEN_VALUE)));
		}
		rs.close();
		return results;
	}

	public boolean isAffecting(String inputPage, String outputPage) throws SQLException{
		boolean AFFECTING = true;
		psGetCleanHistory.setString(1, inputPage);
		psGetCleanHistory.setString(2, outputPage);
		ResultSet rs = psGetCleanHistory.executeQuery();
		if (rs.next())
		{
			return AFFECTING;
		}
		return !AFFECTING;
	}

	public ArrayList<DivinerRecordResult> getResultsPerPageAndParam (String page, long paramId) throws SQLException
	{
		ArrayList<DivinerRecordResult> results = new ArrayList<DivinerRecordResult>();
		psGetResultByParam.setString(1, page);
		psGetResultByParam.setLong(2, paramId);
		ResultSet rs = psGetResultByParam.executeQuery();
		while (rs.next()){
			results.add(new DivinerRecordResult(rs.getLong(RESULTID), rs.getLong(PARAMID), rs.getString(IN_PAGE), rs.getString(OUT_PAGE), rs.getInt(TYPE), rs.getString(DivinerTableParam.NAME), rs.getString(DivinerTableParam.VALUE), rs.getInt(SCENARIO), rs.getInt(HIST_MODE), rs.getInt(IN_PAGE_ID), rs.getInt(OUT_PAGE_ID), rs.getInt(OUTPUT_PLUGIN), rs.getInt(DIFF_PERCENT), rs.getInt(TOKEN_TYPE), rs.getBoolean(IS_TOKEN_APPEND_MODE), rs.getString(TOKEN_VALUE)));
		}
		rs.close();
		return results;
	}
	
	public ArrayList<DivinerRecordResult> getResultsPerPageAndParamUniqueSource (String page, long paramId) throws SQLException
	{
		ArrayList<DivinerRecordResult> results = new ArrayList<DivinerRecordResult>();
		psGetResultByParamUniqueSource.setString(1, page);
		psGetResultByParamUniqueSource.setLong(2, paramId);
		ResultSet rs = psGetResultByParamUniqueSource.executeQuery();
		while (rs.next()){
			results.add(new DivinerRecordResult(-1, rs.getLong(PARAMID), rs.getString(IN_PAGE), "", -1, rs.getString(DivinerTableParam.NAME),  rs.getString(DivinerTableParam.VALUE), -1, -1, rs.getInt(IN_PAGE_ID), -1, -1, -1, -1, false, ""));
		}
		rs.close();
		return results;
	}

	public ArrayList<DivinerRecordResult> getLeads () throws SQLException
	{
		ArrayList<DivinerRecordResult> results = new ArrayList<DivinerRecordResult>();
		ResultSet rs = psGetResultByParamUniqueLeads.executeQuery();
		while (rs.next()){
			results.add(new DivinerRecordResult(-1, rs.getLong(PARAMID), rs.getString(IN_PAGE), rs.getString(OUT_PAGE), rs.getInt(TYPE), rs.getString(DivinerTableParam.NAME),  "", -1, -1, rs.getInt(IN_PAGE_ID), rs.getInt(OUT_PAGE_ID), rs.getInt(OUTPUT_PLUGIN), -1, -1, false, ""));
		}
		rs.close();
		return results;
	}
	
	public ArrayList<String> getPages () throws SQLException
	{
		ArrayList<String> result = new ArrayList<String>();
		ResultSet rs = psGetPages.executeQuery();
		while (rs.next()) {
			result.add(rs.getString(IN_PAGE));

		}
		rs.close();
		return result;
	}

	public ArrayList<String> getOtherParams (String page) throws SQLException
	{
		ArrayList<String> result = new ArrayList<String>();
		psOtherParams.setString(1, page);
		psOtherParams.setString(2, page);

		ResultSet rs = psOtherParams.executeQuery();
		while (rs.next()) {
			result.add(rs.getString("NAME"));

		}
		rs.close();
		return result;
	}

	public long isDuplicate (String page, long pId, String outPage, int type) throws SQLException
	{
		long id = -1;
		psCheckDuplicate.setString(1, page);
		psCheckDuplicate.setLong(2, pId);
		psCheckDuplicate.setString(3, outPage);
		psCheckDuplicate.setInt(4, type);

		ResultSet rs = psCheckDuplicate.executeQuery();

		if (rs.next())
			id = rs.getLong(1);

		return id;
	}

	public long insert(long paramid, String inpage,String outpage, int type, int scenario, int histMode, long inputPageID, long outputPageID, int diffPercent, int tokenType, boolean isTokenAppendMode, String tokenValue,int outputPlugin) throws SQLException {
		
		//Do not show in GUI tokens with more than 30 characters
		if (tokenValue.length() > 30) {
			tokenValue = tokenValue.substring(0, 29);
		}
		
		psInsert1.setLong(1, paramid);
		psInsert1.setString(2, inpage);
		psInsert1.setString(3, outpage);
		psInsert1.setInt(4, type);
		psInsert1.setInt(5, scenario);
		psInsert1.setInt(6, histMode);
		psInsert1.setLong(7, inputPageID);
		psInsert1.setLong(8, outputPageID);
		psInsert1.setInt(9, outputPlugin);
		psInsert1.setInt(10, diffPercent);
		psInsert1.setInt(11, tokenType);
		psInsert1.setBoolean(12, isTokenAppendMode);
		psInsert1.setString(13, tokenValue);
		psInsert1.executeUpdate();

		ResultSet rs = psInsert2.executeQuery();
		rs.next();
		rs.close();

		//Get row count after insertion
		ResultSet rs1 = psRowCount.executeQuery();

		long RowIndex = -1;
		if (rs1.next()) {
			RowIndex = rs1.getLong(1);
		}
		rs1.close();
		return RowIndex;
	}

	public void updateResultType(long resultId, int type, int outputPlugin) throws SQLException {
		psUpdate.setInt(1, type);
		psUpdate.setLong(2, resultId);
		psUpdate.setInt(3, outputPlugin);
		psUpdate.executeUpdate();

	}


	public boolean isPageAuthenticated(String pageName) throws SQLException{

		boolean isAuthenticated = false;
		psGetScenariosInputPage.setString(1, pageName);
		psGetScenariosOutputPage.setString(1, pageName);

		ResultSet rsInpage = psGetScenariosInputPage.executeQuery();
		ResultSet rsOutpage = psGetScenariosOutputPage.executeQuery();
		ArrayList<Integer> inputPageScenarios = new ArrayList<Integer>();
		ArrayList<Integer> outputPageScenarios = new ArrayList<Integer>();

		while (rsInpage.next()) {
			inputPageScenarios.add(rsInpage.getInt(1));
		}
		while (rsOutpage.next()) {
			outputPageScenarios.add(rsOutpage.getInt(1));
		}

		isAuthenticated = isScenariosAuthenticated(inputPageScenarios, true);
		if (isAuthenticated) {
			isAuthenticated = isScenariosAuthenticated(outputPageScenarios, false);

		}
		return isAuthenticated;
	}	
	private boolean isScenariosAuthenticated(ArrayList<Integer> scenarios, boolean isInputPage) {
		boolean isAuthenticated = true;
		for (Integer scenarioIndex : scenarios ) {
			SCENARIO_MODE scenarioName = SCENARIO_MODE.values()[scenarioIndex];
			//Does not require login before
			if (scenarioName == SCENARIO_MODE.DIRECT || (isInputPage && scenarioName == SCENARIO_MODE.LOGIN_AFTER)) {
				isAuthenticated = false;
				break;
			}

		}
		return isAuthenticated;
	}



}

package com.hacktics.diviner.database;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import org.parosproxy.paros.db.AbstractTable;

/**
 * 
 * @author Eran Tamari
 *
 */

public class DivinerTableParam extends AbstractTable {

	private static final String PARAMID	= "PARAMID";
    private static final String PAGE	= "PAGE";
    private static final String METHOD	= "METHOD";
    public static final String NAME	= "NAME";
    public static final String VALUE = "VAL";
    
    private PreparedStatement psRead = null;
    private PreparedStatement psInsert1 = null;
    private CallableStatement psInsert2 = null;
    private PreparedStatement psGetAll = null;
    private PreparedStatement psGetParamPerPage = null;
    private PreparedStatement psCheckDuplicate = null;
    
	@Override
	protected void reconnect(Connection conn) throws SQLException {
		ResultSet rs = conn.getMetaData().getTables(null, null, "DIVINERPARAM", null);
        if ( ! rs.next()) {
        	// Need to create the table
			// Alex: add varchar size limits (ZAP 1.4.1) - r29
            PreparedStatement stmt = conn.prepareStatement(
            		"CREATE cached TABLE DIVINERPARAM (paramid bigint generated by default as identity (start with 1), page varchar(32768) not null, " +
            		"method varchar(255) not null, name varchar(32768) not null, val varchar(32768) not null)");
            stmt.execute();
        }
        rs.close();

        psRead	= conn.prepareStatement("SELECT * FROM DIVINERPARAM WHERE " + PARAMID + " = ?");
        
        psInsert1 = conn.prepareStatement("INSERT INTO DIVINERPARAM (" + PAGE + "," + METHOD + "," + NAME + "," +  VALUE + ") VALUES (?, ?, ?, ?)");
        psInsert2 = conn.prepareCall("CALL IDENTITY();");

        psGetAll = conn.prepareStatement("SELECT * FROM DIVINERPARAM");
        psGetParamPerPage = conn.prepareStatement("SELECT DISTINCT NAME FROM DIVINERPARAM WHERE " + PAGE + "= ?");
        psCheckDuplicate = conn.prepareStatement("SELECT * FROM DIVINERPARAM WHERE " + PAGE + "= ? AND " + NAME + "= ? AND " + METHOD + "= ?");
	} 
	
	public synchronized DivinerRecordParam read(long paramID) throws SQLException {
		psRead.setLong(1, paramID);
		
		ResultSet rs = psRead.executeQuery();
		DivinerRecordParam result = build(rs);
		rs.close();
		return result;
	}
	
	 public ArrayList<DivinerRecordParam> getAll () throws SQLException {
	    	ArrayList<DivinerRecordParam> result = new ArrayList<DivinerRecordParam>();
	    	ResultSet rs = psGetAll.executeQuery();
	    	while (rs.next()) {
	    		result.add(new DivinerRecordParam(rs.getLong(PARAMID), rs.getString(PAGE), rs.getString(METHOD),  
	    				rs.getString(NAME), rs.getString(VALUE)));
	    	}
	    	rs.close();
	    	
	    	return result;
	    }
	 
	 public ArrayList<String> getParamsInPage (String page) throws SQLException {
	    	ArrayList<String> result = new ArrayList<String>();
	    	psGetParamPerPage.setString(1, page);
	    	ResultSet rs = psGetParamPerPage.executeQuery();
	    	while (rs.next()) {
	    		result.add(rs.getString(NAME));
	    	}
	    	rs.close();
	    	
	    	return result;
	    }
	 
	 public long isDuplicate (String page, String name, String method) throws SQLException
	 {
		 long id = -1;
		 psCheckDuplicate.setString(1, page);
		 psCheckDuplicate.setString(2, name);
		 psCheckDuplicate.setString(3, method);
		 ResultSet rs = psCheckDuplicate.executeQuery();
		 
		 if (rs.next())
			 id = rs.getLong(1);
		 
		 return id;
	 }

	 public synchronized DivinerRecordParam insert(String page, String method, String name, String value) throws SQLException {
	    	psInsert1.setString(1, page);
	        psInsert1.setString(2, method);
	        psInsert1.setString(3, name);
	        psInsert1.setString(4, value);
	        psInsert1.executeUpdate();
	        
			ResultSet rs = psInsert2.executeQuery();
			rs.next();
			long id = rs.getLong(1);
			rs.close();
			return read(id);
	    }
	    
		    
	    private DivinerRecordParam build(ResultSet rs) throws SQLException {
	    	DivinerRecordParam rt = null;
	        if (rs.next()) {
	            rt = new DivinerRecordParam(rs.getLong(PARAMID), rs.getString(PAGE), rs.getString(METHOD), 
	            		rs.getString(NAME),  rs.getString(VALUE));            
	        }
	        return rt;
	    }

	
}
